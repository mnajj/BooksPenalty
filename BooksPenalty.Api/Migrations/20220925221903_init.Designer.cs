// <auto-generated />
using System;
using BooksPenalty.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BooksPenalty.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220925221903_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BooksPenalty.Api.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b00baa00-7df7-41ea-83bf-e90568c85738"),
                            Author = "Herman Melville",
                            Name = "Moby-Dick",
                            Pages = 558
                        });
                });

            modelBuilder.Entity("BooksPenalty.Api.Models.BookPenalty", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PenaltyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BookId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BookPenalties");
                });

            modelBuilder.Entity("BooksPenalty.Api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dacf51ff-bf8f-43d1-9429-2b679bc52939")
                        });
                });

            modelBuilder.Entity("BooksPenalty.Api.Models.BookPenalty", b =>
                {
                    b.HasOne("BooksPenalty.Api.Models.Book", "Book")
                        .WithMany("BookPenalties")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksPenalty.Api.Models.User", "User")
                        .WithMany("BookPenalties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BooksPenalty.Api.Models.Book", b =>
                {
                    b.Navigation("BookPenalties");
                });

            modelBuilder.Entity("BooksPenalty.Api.Models.User", b =>
                {
                    b.Navigation("BookPenalties");
                });
#pragma warning restore 612, 618
        }
    }
}
